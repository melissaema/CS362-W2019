---------------------Testing Village Card----------------------

Test #1: 2 Players, Player 0's turn, Deck Count: 314, Hand Count: 367, Discard Count: 434
Errors: 0

Test #2: 4 Players, Player 3's turn, Deck Count: 87, Hand Count: 273, Discard Count: 1
Errors: 0

Test #3: 3 Players, Player 0's turn, Deck Count: 372, Hand Count: 90, Discard Count: 456
Errors: 0

Test #4: 4 Players, Player 3's turn, Deck Count: 162, Hand Count: 284, Discard Count: 459
Errors: 0

Test #5: 4 Players, Player 0's turn, Deck Count: 125, Hand Count: 330, Discard Count: 231
Errors: 0

Test #6: 4 Players, Player 1's turn, Deck Count: 487, Hand Count: 448, Discard Count: 384
Errors: 0

Test #7: 4 Players, Player 2's turn, Deck Count: 464, Hand Count: 272, Discard Count: 235
Errors: 0

Test #8: 2 Players, Player 1's turn, Deck Count: 220, Hand Count: 303, Discard Count: 277
Errors: 0

Test #9: 4 Players, Player 2's turn, Deck Count: 232, Hand Count: 123, Discard Count: 274
Errors: 0

Test #10: 2 Players, Player 1's turn, Deck Count: 190, Hand Count: 468, Discard Count: 293
Errors: 0

Test #11: 2 Players, Player 1's turn, Deck Count: 384, Hand Count: 52, Discard Count: 394
Errors: 0

Test #12: 2 Players, Player 0's turn, Deck Count: 200, Hand Count: 177, Discard Count: 459
Errors: 0

Test #13: 3 Players, Player 0's turn, Deck Count: 43, Hand Count: 258, Discard Count: 127
Errors: 0

Test #14: 2 Players, Player 1's turn, Deck Count: 128, Hand Count: 436, Discard Count: 367
Errors: 0

Test #15: 4 Players, Player 3's turn, Deck Count: 444, Hand Count: 362, Discard Count: 357
Errors: 0

Test #16: 4 Players, Player 3's turn, Deck Count: 42, Hand Count: 417, Discard Count: 447
Errors: 0

Test #17: 3 Players, Player 2's turn, Deck Count: 321, Hand Count: 231, Discard Count: 98
Errors: 0

Test #18: 4 Players, Player 2's turn, Deck Count: 405, Hand Count: 300, Discard Count: 16
Errors: 0

Test #19: 2 Players, Player 1's turn, Deck Count: 8, Hand Count: 273, Discard Count: 475
Errors: 0

Test #20: 3 Players, Player 0's turn, Deck Count: 300, Hand Count: 373, Discard Count: 411
Errors: 0

Test #21: 2 Players, Player 0's turn, Deck Count: 476, Hand Count: 250, Discard Count: 470
Errors: 0

Test #22: 4 Players, Player 1's turn, Deck Count: 80, Hand Count: 456, Discard Count: 204
Errors: 0

Test #23: 2 Players, Player 0's turn, Deck Count: 251, Hand Count: 178, Discard Count: 239
Errors: 0

Test #24: 3 Players, Player 1's turn, Deck Count: 192, Hand Count: 28, Discard Count: 428
Errors: 0

Test #25: 3 Players, Player 1's turn, Deck Count: 372, Hand Count: 355, Discard Count: 396
Errors: 0

Test #26: 3 Players, Player 2's turn, Deck Count: 144, Hand Count: 83, Discard Count: 158
Errors: 0

Test #27: 4 Players, Player 2's turn, Deck Count: 424, Hand Count: 140, Discard Count: 359
Errors: 0

Test #28: 4 Players, Player 1's turn, Deck Count: 217, Hand Count: 109, Discard Count: 398
Errors: 0

Test #29: 2 Players, Player 1's turn, Deck Count: 295, Hand Count: 112, Discard Count: 66
Errors: 0

Test #30: 3 Players, Player 2's turn, Deck Count: 269, Hand Count: 294, Discard Count: 37
Errors: 0

Test #31: 3 Players, Player 0's turn, Deck Count: 27, Hand Count: 253, Discard Count: 0
Errors: 0

Test #32: 2 Players, Player 1's turn, Deck Count: 412, Hand Count: 437, Discard Count: 90
Errors: 0

Test #33: 3 Players, Player 1's turn, Deck Count: 480, Hand Count: 207, Discard Count: 427
Errors: 0

Test #34: 2 Players, Player 1's turn, Deck Count: 386, Hand Count: 167, Discard Count: 19
Errors: 0

Test #35: 3 Players, Player 2's turn, Deck Count: 297, Hand Count: 163, Discard Count: 136
Errors: 0

Test #36: 3 Players, Player 2's turn, Deck Count: 293, Hand Count: 47, Discard Count: 31
Errors: 0

Test #37: 3 Players, Player 1's turn, Deck Count: 295, Hand Count: 96, Discard Count: 89
Errors: 0

Test #38: 2 Players, Player 1's turn, Deck Count: 367, Hand Count: 404, Discard Count: 321
Errors: 0

Test #39: 2 Players, Player 0's turn, Deck Count: 158, Hand Count: 327, Discard Count: 233
Errors: 0

Test #40: 4 Players, Player 2's turn, Deck Count: 261, Hand Count: 342, Discard Count: 169
Errors: 0

Test #41: 3 Players, Player 1's turn, Deck Count: 223, Hand Count: 413, Discard Count: 497
Errors: 0

Test #42: 3 Players, Player 2's turn, Deck Count: 3, Hand Count: 337, Discard Count: 9
Errors: 0

Test #43: 3 Players, Player 1's turn, Deck Count: 454, Hand Count: 286, Discard Count: 413
Errors: 0

Test #44: 3 Players, Player 1's turn, Deck Count: 104, Hand Count: 407, Discard Count: 469
Errors: 0

Test #45: 2 Players, Player 1's turn, Deck Count: 65, Hand Count: 191, Discard Count: 114
Errors: 0

Test #46: 3 Players, Player 2's turn, Deck Count: 445, Hand Count: 263, Discard Count: 83
Errors: 0

Test #47: 3 Players, Player 1's turn, Deck Count: 243, Hand Count: 195, Discard Count: 76
Errors: 0

Test #48: 4 Players, Player 3's turn, Deck Count: 454, Hand Count: 380, Discard Count: 118
Errors: 0

Test #49: 4 Players, Player 3's turn, Deck Count: 177, Hand Count: 155, Discard Count: 52
Errors: 0

Test #50: 3 Players, Player 1's turn, Deck Count: 395, Hand Count: 478, Discard Count: 231
Errors: 0

Test #51: 4 Players, Player 0's turn, Deck Count: 61, Hand Count: 364, Discard Count: 170
Errors: 0

Test #52: 2 Players, Player 0's turn, Deck Count: 121, Hand Count: 322, Discard Count: 174
Errors: 0

Test #53: 4 Players, Player 2's turn, Deck Count: 297, Hand Count: 347, Discard Count: 231
Errors: 0

Test #54: 4 Players, Player 3's turn, Deck Count: 89, Hand Count: 490, Discard Count: 442
Errors: 0

Test #55: 4 Players, Player 1's turn, Deck Count: 225, Hand Count: 176, Discard Count: 132
Errors: 0

Test #56: 3 Players, Player 1's turn, Deck Count: 406, Hand Count: 154, Discard Count: 129
Errors: 0

Test #57: 4 Players, Player 0's turn, Deck Count: 147, Hand Count: 61, Discard Count: 5
Errors: 0

Test #58: 4 Players, Player 0's turn, Deck Count: 363, Hand Count: 115, Discard Count: 179
Errors: 0

Test #59: 4 Players, Player 3's turn, Deck Count: 155, Hand Count: 109, Discard Count: 355
Errors: 0

Test #60: 3 Players, Player 2's turn, Deck Count: 240, Hand Count: 399, Discard Count: 434
Errors: 0

Test #61: 3 Players, Player 2's turn, Deck Count: 242, Hand Count: 176, Discard Count: 184
Errors: 0

Test #62: 2 Players, Player 1's turn, Deck Count: 136, Hand Count: 437, Discard Count: 231
Errors: 0

Test #63: 4 Players, Player 0's turn, Deck Count: 101, Hand Count: 417, Discard Count: 356
Errors: 0

Test #64: 3 Players, Player 1's turn, Deck Count: 319, Hand Count: 25, Discard Count: 277
Errors: 0

Test #65: 4 Players, Player 2's turn, Deck Count: 419, Hand Count: 375, Discard Count: 196
Errors: 0

Test #66: 4 Players, Player 0's turn, Deck Count: 21, Hand Count: 350, Discard Count: 496
Errors: 0

Test #67: 4 Players, Player 2's turn, Deck Count: 394, Hand Count: 51, Discard Count: 495
Errors: 0

Test #68: 3 Players, Player 1's turn, Deck Count: 88, Hand Count: 245, Discard Count: 151
Errors: 0

Test #69: 3 Players, Player 1's turn, Deck Count: 121, Hand Count: 348, Discard Count: 469
Errors: 0

Test #70: 2 Players, Player 1's turn, Deck Count: 162, Hand Count: 488, Discard Count: 332
Errors: 0

Test #71: 4 Players, Player 3's turn, Deck Count: 93, Hand Count: 153, Discard Count: 321
Errors: 0

Test #72: 2 Players, Player 0's turn, Deck Count: 158, Hand Count: 34, Discard Count: 125
Errors: 0

Test #73: 4 Players, Player 2's turn, Deck Count: 397, Hand Count: 363, Discard Count: 390
Errors: 0

Test #74: 2 Players, Player 0's turn, Deck Count: 284, Hand Count: 284, Discard Count: 233
Errors: 0

Test #75: 4 Players, Player 0's turn, Deck Count: 358, Hand Count: 272, Discard Count: 212
Errors: 0

Test #76: 2 Players, Player 1's turn, Deck Count: 306, Hand Count: 32, Discard Count: 260
Errors: 0

Test #77: 2 Players, Player 0's turn, Deck Count: 273, Hand Count: 361, Discard Count: 102
Errors: 0

Test #78: 3 Players, Player 2's turn, Deck Count: 381, Hand Count: 287, Discard Count: 11
Errors: 0

Test #79: 3 Players, Player 1's turn, Deck Count: 256, Hand Count: 28, Discard Count: 186
Errors: 0

Test #80: 3 Players, Player 0's turn, Deck Count: 13, Hand Count: 52, Discard Count: 381
Errors: 0

Test #81: 3 Players, Player 0's turn, Deck Count: 26, Hand Count: 362, Discard Count: 286
Errors: 0

Test #82: 4 Players, Player 2's turn, Deck Count: 247, Hand Count: 28, Discard Count: 378
Errors: 0

Test #83: 3 Players, Player 0's turn, Deck Count: 368, Hand Count: 105, Discard Count: 64
Errors: 0

Test #84: 4 Players, Player 2's turn, Deck Count: 434, Hand Count: 32, Discard Count: 417
Errors: 0

Test #85: 3 Players, Player 2's turn, Deck Count: 322, Hand Count: 72, Discard Count: 383
Errors: 0

Test #86: 2 Players, Player 0's turn, Deck Count: 375, Hand Count: 135, Discard Count: 215
Errors: 0

Test #87: 4 Players, Player 1's turn, Deck Count: 426, Hand Count: 194, Discard Count: 186
Errors: 0

Test #88: 3 Players, Player 0's turn, Deck Count: 135, Hand Count: 347, Discard Count: 103
Errors: 0

Test #89: 2 Players, Player 0's turn, Deck Count: 7, Hand Count: 468, Discard Count: 39
Errors: 0

Test #90: 3 Players, Player 1's turn, Deck Count: 318, Hand Count: 374, Discard Count: 24
Errors: 0

Test #91: 3 Players, Player 0's turn, Deck Count: 333, Hand Count: 41, Discard Count: 385
Errors: 0

Test #92: 4 Players, Player 1's turn, Deck Count: 382, Hand Count: 278, Discard Count: 116
Errors: 0

Test #93: 4 Players, Player 0's turn, Deck Count: 416, Hand Count: 37, Discard Count: 407
Errors: 0

Test #94: 3 Players, Player 2's turn, Deck Count: 65, Hand Count: 8, Discard Count: 63
Errors: 0

Test #95: 4 Players, Player 0's turn, Deck Count: 150, Hand Count: 411, Discard Count: 322
Errors: 0

Test #96: 4 Players, Player 3's turn, Deck Count: 467, Hand Count: 485, Discard Count: 39
Errors: 0

Test #97: 4 Players, Player 2's turn, Deck Count: 37, Hand Count: 73, Discard Count: 147
Errors: 0

Test #98: 2 Players, Player 1's turn, Deck Count: 478, Hand Count: 249, Discard Count: 177
Errors: 0

Test #99: 2 Players, Player 0's turn, Deck Count: 78, Hand Count: 103, Discard Count: 12
Errors: 0

Test #100: 4 Players, Player 3's turn, Deck Count: 459, Hand Count: 314, Discard Count: 122
Errors: 0

Test #101: 4 Players, Player 2's turn, Deck Count: 390, Hand Count: 240, Discard Count: 55
Errors: 0

Test #102: 4 Players, Player 2's turn, Deck Count: 151, Hand Count: 18, Discard Count: 191
Errors: 0

Test #103: 2 Players, Player 0's turn, Deck Count: 330, Hand Count: 178, Discard Count: 423
Errors: 0

Test #104: 2 Players, Player 0's turn, Deck Count: 7, Hand Count: 384, Discard Count: 456
Errors: 0

Test #105: 4 Players, Player 3's turn, Deck Count: 443, Hand Count: 443, Discard Count: 301
Errors: 0

Test #106: 2 Players, Player 1's turn, Deck Count: 263, Hand Count: 64, Discard Count: 451
Errors: 0

Test #107: 2 Players, Player 1's turn, Deck Count: 141, Hand Count: 398, Discard Count: 398
Errors: 0

Test #108: 4 Players, Player 2's turn, Deck Count: 260, Hand Count: 442, Discard Count: 252
Errors: 0

Test #109: 4 Players, Player 0's turn, Deck Count: 304, Hand Count: 38, Discard Count: 341
Errors: 0

Test #110: 2 Players, Player 1's turn, Deck Count: 418, Hand Count: 465, Discard Count: 439
Errors: 0

Test #111: 3 Players, Player 1's turn, Deck Count: 35, Hand Count: 413, Discard Count: 464
Errors: 0

Test #112: 4 Players, Player 1's turn, Deck Count: 368, Hand Count: 342, Discard Count: 331
Errors: 0

Test #113: 3 Players, Player 0's turn, Deck Count: 33, Hand Count: 23, Discard Count: 346
Errors: 0

Test #114: 4 Players, Player 3's turn, Deck Count: 469, Hand Count: 80, Discard Count: 338
Errors: 0

Test #115: 3 Players, Player 2's turn, Deck Count: 90, Hand Count: 284, Discard Count: 491
Errors: 0

Test #116: 2 Players, Player 0's turn, Deck Count: 11, Hand Count: 309, Discard Count: 195
Errors: 0

Test #117: 3 Players, Player 2's turn, Deck Count: 36, Hand Count: 77, Discard Count: 91
Errors: 0

Test #118: 2 Players, Player 0's turn, Deck Count: 119, Hand Count: 335, Discard Count: 419
Errors: 0

Test #119: 3 Players, Player 2's turn, Deck Count: 347, Hand Count: 187, Discard Count: 220
Errors: 0

Test #120: 2 Players, Player 1's turn, Deck Count: 79, Hand Count: 106, Discard Count: 389
Errors: 0

Test #121: 4 Players, Player 0's turn, Deck Count: 442, Hand Count: 475, Discard Count: 91
Errors: 0

Test #122: 3 Players, Player 1's turn, Deck Count: 279, Hand Count: 158, Discard Count: 232
Errors: 0

Test #123: 4 Players, Player 1's turn, Deck Count: 328, Hand Count: 78, Discard Count: 497
Errors: 0

Test #124: 4 Players, Player 2's turn, Deck Count: 479, Hand Count: 136, Discard Count: 4
Errors: 0

Test #125: 2 Players, Player 1's turn, Deck Count: 95, Hand Count: 228, Discard Count: 10
Errors: 0

Test #126: 2 Players, Player 0's turn, Deck Count: 146, Hand Count: 445, Discard Count: 293
Errors: 0

Test #127: 2 Players, Player 0's turn, Deck Count: 236, Hand Count: 205, Discard Count: 46
Errors: 0

Test #128: 4 Players, Player 1's turn, Deck Count: 351, Hand Count: 426, Discard Count: 137
Errors: 0

Test #129: 4 Players, Player 0's turn, Deck Count: 134, Hand Count: 377, Discard Count: 354
Errors: 0

Test #130: 3 Players, Player 2's turn, Deck Count: 131, Hand Count: 361, Discard Count: 448
Errors: 0

Test #131: 3 Players, Player 2's turn, Deck Count: 428, Hand Count: 260, Discard Count: 393
Errors: 0

Test #132: 4 Players, Player 0's turn, Deck Count: 57, Hand Count: 327, Discard Count: 292
Errors: 0

Test #133: 3 Players, Player 0's turn, Deck Count: 326, Hand Count: 86, Discard Count: 263
Errors: 0

Test #134: 2 Players, Player 0's turn, Deck Count: 134, Hand Count: 157, Discard Count: 136
Errors: 0

Test #135: 2 Players, Player 1's turn, Deck Count: 162, Hand Count: 103, Discard Count: 328
Errors: 0

Test #136: 3 Players, Player 0's turn, Deck Count: 452, Hand Count: 427, Discard Count: 220
Errors: 0

Test #137: 2 Players, Player 0's turn, Deck Count: 312, Hand Count: 414, Discard Count: 158
Errors: 0

Test #138: 2 Players, Player 1's turn, Deck Count: 121, Hand Count: 107, Discard Count: 350
Errors: 0

Test #139: 3 Players, Player 2's turn, Deck Count: 499, Hand Count: 239, Discard Count: 173
Errors: 0

Test #140: 3 Players, Player 2's turn, Deck Count: 285, Hand Count: 120, Discard Count: 335
Errors: 0

Test #141: 3 Players, Player 0's turn, Deck Count: 228, Hand Count: 421, Discard Count: 17
Errors: 0

Test #142: 4 Players, Player 1's turn, Deck Count: 105, Hand Count: 18, Discard Count: 128
Errors: 0

Test #143: 3 Players, Player 0's turn, Deck Count: 247, Hand Count: 186, Discard Count: 231
Errors: 0

Test #144: 3 Players, Player 1's turn, Deck Count: 368, Hand Count: 415, Discard Count: 163
Errors: 0

Test #145: 3 Players, Player 1's turn, Deck Count: 312, Hand Count: 209, Discard Count: 352
Errors: 0

Test #146: 2 Players, Player 1's turn, Deck Count: 237, Hand Count: 298, Discard Count: 491
Errors: 0

Test #147: 2 Players, Player 1's turn, Deck Count: 101, Hand Count: 449, Discard Count: 307
Errors: 0

Test #148: 3 Players, Player 1's turn, Deck Count: 363, Hand Count: 2, Discard Count: 16
Errors: 0

Test #149: 2 Players, Player 0's turn, Deck Count: 333, Hand Count: 418, Discard Count: 136
Errors: 0

Test #150: 4 Players, Player 1's turn, Deck Count: 382, Hand Count: 272, Discard Count: 454
Errors: 0

Test #151: 3 Players, Player 0's turn, Deck Count: 203, Hand Count: 54, Discard Count: 47
Errors: 0

Test #152: 4 Players, Player 3's turn, Deck Count: 310, Hand Count: 285, Discard Count: 459
Errors: 0

Test #153: 3 Players, Player 1's turn, Deck Count: 434, Hand Count: 163, Discard Count: 445
Errors: 0

Test #154: 3 Players, Player 1's turn, Deck Count: 157, Hand Count: 285, Discard Count: 345
Errors: 0

Test #155: 2 Players, Player 0's turn, Deck Count: 254, Hand Count: 63, Discard Count: 316
Errors: 0

Test #156: 2 Players, Player 0's turn, Deck Count: 168, Hand Count: 270, Discard Count: 82
Errors: 0

Test #157: 2 Players, Player 0's turn, Deck Count: 55, Hand Count: 61, Discard Count: 248
Errors: 0

Test #158: 3 Players, Player 2's turn, Deck Count: 303, Hand Count: 424, Discard Count: 410
Errors: 0

Test #159: 3 Players, Player 2's turn, Deck Count: 6, Hand Count: 93, Discard Count: 11
Errors: 0

Test #160: 4 Players, Player 2's turn, Deck Count: 360, Hand Count: 339, Discard Count: 235
Errors: 0

Test #161: 2 Players, Player 1's turn, Deck Count: 66, Hand Count: 406, Discard Count: 104
Errors: 0

Test #162: 2 Players, Player 1's turn, Deck Count: 266, Hand Count: 234, Discard Count: 285
Errors: 0

Test #163: 3 Players, Player 2's turn, Deck Count: 189, Hand Count: 196, Discard Count: 134
Errors: 0

Test #164: 2 Players, Player 1's turn, Deck Count: 98, Hand Count: 207, Discard Count: 180
Errors: 0

Test #165: 2 Players, Player 0's turn, Deck Count: 435, Hand Count: 367, Discard Count: 22
Errors: 0

Test #166: 2 Players, Player 0's turn, Deck Count: 183, Hand Count: 474, Discard Count: 246
Errors: 0

Test #167: 4 Players, Player 3's turn, Deck Count: 108, Hand Count: 206, Discard Count: 446
Errors: 0

Test #168: 2 Players, Player 0's turn, Deck Count: 205, Hand Count: 262, Discard Count: 256
Errors: 0

Test #169: 2 Players, Player 1's turn, Deck Count: 422, Hand Count: 259, Discard Count: 244
Errors: 0

Test #170: 4 Players, Player 1's turn, Deck Count: 150, Hand Count: 83, Discard Count: 18
Errors: 0

Test #171: 4 Players, Player 1's turn, Deck Count: 131, Hand Count: 103, Discard Count: 469
Errors: 0

Test #172: 3 Players, Player 0's turn, Deck Count: 414, Hand Count: 11, Discard Count: 401
Errors: 0

Test #173: 3 Players, Player 0's turn, Deck Count: 370, Hand Count: 150, Discard Count: 490
Errors: 0

Test #174: 4 Players, Player 2's turn, Deck Count: 160, Hand Count: 481, Discard Count: 403
Errors: 0

Test #175: 4 Players, Player 0's turn, Deck Count: 482, Hand Count: 112, Discard Count: 311
Errors: 0

Test #176: 4 Players, Player 2's turn, Deck Count: 264, Hand Count: 199, Discard Count: 132
Errors: 0

Test #177: 2 Players, Player 1's turn, Deck Count: 406, Hand Count: 75, Discard Count: 192
Errors: 0

Test #178: 3 Players, Player 0's turn, Deck Count: 395, Hand Count: 222, Discard Count: 95
Errors: 0

Test #179: 4 Players, Player 3's turn, Deck Count: 377, Hand Count: 459, Discard Count: 84
Errors: 0

Test #180: 2 Players, Player 0's turn, Deck Count: 171, Hand Count: 144, Discard Count: 266
Errors: 0

Test #181: 4 Players, Player 1's turn, Deck Count: 109, Hand Count: 82, Discard Count: 166
Errors: 0

Test #182: 2 Players, Player 0's turn, Deck Count: 92, Hand Count: 444, Discard Count: 69
Errors: 0

Test #183: 2 Players, Player 0's turn, Deck Count: 217, Hand Count: 439, Discard Count: 389
Errors: 0

Test #184: 2 Players, Player 0's turn, Deck Count: 465, Hand Count: 444, Discard Count: 429
Errors: 0

Test #185: 4 Players, Player 0's turn, Deck Count: 310, Hand Count: 455, Discard Count: 492
Errors: 0

Test #186: 4 Players, Player 3's turn, Deck Count: 343, Hand Count: 410, Discard Count: 486
Errors: 0

Test #187: 3 Players, Player 0's turn, Deck Count: 37, Hand Count: 272, Discard Count: 58
Errors: 0

Test #188: 3 Players, Player 2's turn, Deck Count: 464, Hand Count: 97, Discard Count: 310
Errors: 0

Test #189: 2 Players, Player 0's turn, Deck Count: 52, Hand Count: 269, Discard Count: 368
Errors: 0

Test #190: 4 Players, Player 2's turn, Deck Count: 165, Hand Count: 175, Discard Count: 158
Errors: 0

Test #191: 3 Players, Player 0's turn, Deck Count: 117, Hand Count: 156, Discard Count: 478
Errors: 0

Test #192: 2 Players, Player 0's turn, Deck Count: 204, Hand Count: 136, Discard Count: 87
Errors: 0

Test #193: 4 Players, Player 0's turn, Deck Count: 101, Hand Count: 294, Discard Count: 28
Errors: 0

Test #194: 3 Players, Player 2's turn, Deck Count: 405, Hand Count: 388, Discard Count: 215
Errors: 0

Test #195: 4 Players, Player 0's turn, Deck Count: 230, Hand Count: 9, Discard Count: 215
Errors: 0

Test #196: 4 Players, Player 0's turn, Deck Count: 326, Hand Count: 26, Discard Count: 200
Errors: 0

Test #197: 2 Players, Player 0's turn, Deck Count: 282, Hand Count: 225, Discard Count: 139
Errors: 0

Test #198: 2 Players, Player 0's turn, Deck Count: 294, Hand Count: 247, Discard Count: 10
Errors: 0

Test #199: 4 Players, Player 2's turn, Deck Count: 276, Hand Count: 256, Discard Count: 75
Errors: 0

Test #200: 4 Players, Player 2's turn, Deck Count: 109, Hand Count: 267, Discard Count: 376
Errors: 0

Test #201: 2 Players, Player 1's turn, Deck Count: 411, Hand Count: 197, Discard Count: 21
Errors: 0

Test #202: 3 Players, Player 0's turn, Deck Count: 481, Hand Count: 330, Discard Count: 458
Errors: 0

Test #203: 3 Players, Player 2's turn, Deck Count: 495, Hand Count: 395, Discard Count: 330
Errors: 0

Test #204: 4 Players, Player 1's turn, Deck Count: 84, Hand Count: 24, Discard Count: 424
Errors: 0

Test #205: 2 Players, Player 1's turn, Deck Count: 206, Hand Count: 176, Discard Count: 157
Errors: 0

Test #206: 3 Players, Player 2's turn, Deck Count: 32, Hand Count: 104, Discard Count: 10
Errors: 0

Test #207: 4 Players, Player 1's turn, Deck Count: 82, Hand Count: 168, Discard Count: 184
Errors: 0

Test #208: 2 Players, Player 1's turn, Deck Count: 465, Hand Count: 400, Discard Count: 484
Errors: 0

Test #209: 2 Players, Player 0's turn, Deck Count: 80, Hand Count: 195, Discard Count: 132
Errors: 0

Test #210: 4 Players, Player 0's turn, Deck Count: 169, Hand Count: 202, Discard Count: 15
Errors: 0

Test #211: 2 Players, Player 0's turn, Deck Count: 258, Hand Count: 273, Discard Count: 360
Errors: 0

Test #212: 2 Players, Player 1's turn, Deck Count: 377, Hand Count: 426, Discard Count: 442
Errors: 0

Test #213: 2 Players, Player 0's turn, Deck Count: 242, Hand Count: 273, Discard Count: 459
Errors: 0

Test #214: 2 Players, Player 0's turn, Deck Count: 57, Hand Count: 310, Discard Count: 426
Errors: 0

Test #215: 4 Players, Player 0's turn, Deck Count: 45, Hand Count: 391, Discard Count: 226
Errors: 0

Test #216: 2 Players, Player 0's turn, Deck Count: 261, Hand Count: 19, Discard Count: 159
Errors: 0

Test #217: 2 Players, Player 1's turn, Deck Count: 332, Hand Count: 134, Discard Count: 162
Errors: 0

Test #218: 2 Players, Player 1's turn, Deck Count: 375, Hand Count: 211, Discard Count: 47
Errors: 0

Test #219: 2 Players, Player 1's turn, Deck Count: 342, Hand Count: 464, Discard Count: 483
Errors: 0

Test #220: 3 Players, Player 2's turn, Deck Count: 448, Hand Count: 458, Discard Count: 9
Errors: 0

Test #221: 4 Players, Player 1's turn, Deck Count: 291, Hand Count: 175, Discard Count: 215
Errors: 0

Test #222: 4 Players, Player 3's turn, Deck Count: 473, Hand Count: 350, Discard Count: 134
Errors: 0

Test #223: 3 Players, Player 2's turn, Deck Count: 432, Hand Count: 353, Discard Count: 268
Errors: 0

Test #224: 2 Players, Player 0's turn, Deck Count: 132, Hand Count: 11, Discard Count: 229
Errors: 0

Test #225: 4 Players, Player 3's turn, Deck Count: 181, Hand Count: 312, Discard Count: 478
Errors: 0

Test #226: 2 Players, Player 0's turn, Deck Count: 475, Hand Count: 111, Discard Count: 405
Errors: 0

Test #227: 2 Players, Player 0's turn, Deck Count: 287, Hand Count: 1, Discard Count: 206
Errors: 0

Test #228: 4 Players, Player 3's turn, Deck Count: 376, Hand Count: 61, Discard Count: 296
Errors: 0

Test #229: 3 Players, Player 2's turn, Deck Count: 409, Hand Count: 387, Discard Count: 257
Errors: 0

Test #230: 4 Players, Player 1's turn, Deck Count: 146, Hand Count: 133, Discard Count: 405
Errors: 0

Test #231: 2 Players, Player 1's turn, Deck Count: 229, Hand Count: 239, Discard Count: 1
Errors: 0

Test #232: 4 Players, Player 3's turn, Deck Count: 151, Hand Count: 277, Discard Count: 41
Errors: 0

Test #233: 3 Players, Player 0's turn, Deck Count: 255, Hand Count: 229, Discard Count: 475
Errors: 0

Test #234: 2 Players, Player 0's turn, Deck Count: 180, Hand Count: 443, Discard Count: 389
Errors: 0

Test #235: 4 Players, Player 2's turn, Deck Count: 413, Hand Count: 356, Discard Count: 473
Errors: 0

Test #236: 2 Players, Player 0's turn, Deck Count: 484, Hand Count: 491, Discard Count: 286
Errors: 0

Test #237: 4 Players, Player 3's turn, Deck Count: 469, Hand Count: 347, Discard Count: 385
Errors: 0

Test #238: 2 Players, Player 1's turn, Deck Count: 91, Hand Count: 126, Discard Count: 350
Errors: 0

Test #239: 4 Players, Player 3's turn, Deck Count: 234, Hand Count: 433, Discard Count: 31
Errors: 0

Test #240: 3 Players, Player 2's turn, Deck Count: 30, Hand Count: 428, Discard Count: 461
Errors: 0

Test #241: 2 Players, Player 1's turn, Deck Count: 151, Hand Count: 411, Discard Count: 93
Errors: 0

Test #242: 2 Players, Player 1's turn, Deck Count: 350, Hand Count: 471, Discard Count: 134
Errors: 0

Test #243: 4 Players, Player 1's turn, Deck Count: 330, Hand Count: 187, Discard Count: 87
Errors: 0

Test #244: 3 Players, Player 2's turn, Deck Count: 341, Hand Count: 21, Discard Count: 144
Errors: 0

Test #245: 4 Players, Player 0's turn, Deck Count: 7, Hand Count: 60, Discard Count: 240
Errors: 0

Test #246: 2 Players, Player 1's turn, Deck Count: 96, Hand Count: 163, Discard Count: 370
Errors: 0

Test #247: 4 Players, Player 0's turn, Deck Count: 39, Hand Count: 119, Discard Count: 103
Errors: 0

Test #248: 2 Players, Player 0's turn, Deck Count: 299, Hand Count: 132, Discard Count: 167
Errors: 0

Test #249: 4 Players, Player 0's turn, Deck Count: 110, Hand Count: 67, Discard Count: 233
Errors: 0

Test #250: 4 Players, Player 1's turn, Deck Count: 196, Hand Count: 116, Discard Count: 98
Errors: 0

Test #251: 4 Players, Player 1's turn, Deck Count: 69, Hand Count: 461, Discard Count: 73
Errors: 0

Test #252: 3 Players, Player 1's turn, Deck Count: 229, Hand Count: 203, Discard Count: 32
Errors: 0

Test #253: 4 Players, Player 0's turn, Deck Count: 299, Hand Count: 129, Discard Count: 151
Errors: 0

Test #254: 3 Players, Player 1's turn, Deck Count: 265, Hand Count: 41, Discard Count: 444
Errors: 0

Test #255: 3 Players, Player 2's turn, Deck Count: 34, Hand Count: 213, Discard Count: 273
Errors: 0

Test #256: 2 Players, Player 0's turn, Deck Count: 228, Hand Count: 286, Discard Count: 472
Errors: 0

Test #257: 3 Players, Player 2's turn, Deck Count: 100, Hand Count: 399, Discard Count: 410
Errors: 0

Test #258: 2 Players, Player 0's turn, Deck Count: 220, Hand Count: 129, Discard Count: 58
Errors: 0

Test #259: 2 Players, Player 1's turn, Deck Count: 146, Hand Count: 220, Discard Count: 274
Errors: 0

Test #260: 4 Players, Player 1's turn, Deck Count: 413, Hand Count: 411, Discard Count: 269
Errors: 0

Test #261: 4 Players, Player 2's turn, Deck Count: 189, Hand Count: 132, Discard Count: 339
Errors: 0

Test #262: 2 Players, Player 1's turn, Deck Count: 235, Hand Count: 262, Discard Count: 19
Errors: 0

Test #263: 2 Players, Player 1's turn, Deck Count: 8, Hand Count: 11, Discard Count: 210
Errors: 0

Test #264: 4 Players, Player 3's turn, Deck Count: 284, Hand Count: 292, Discard Count: 110
Errors: 0

Test #265: 4 Players, Player 3's turn, Deck Count: 193, Hand Count: 203, Discard Count: 225
Errors: 0

Test #266: 4 Players, Player 0's turn, Deck Count: 290, Hand Count: 330, Discard Count: 287
Errors: 0

Test #267: 2 Players, Player 1's turn, Deck Count: 373, Hand Count: 270, Discard Count: 386
Errors: 0

Test #268: 4 Players, Player 3's turn, Deck Count: 496, Hand Count: 241, Discard Count: 476
Errors: 0

Test #269: 2 Players, Player 0's turn, Deck Count: 71, Hand Count: 496, Discard Count: 228
Errors: 0

Test #270: 3 Players, Player 2's turn, Deck Count: 128, Hand Count: 226, Discard Count: 269
Errors: 0

Test #271: 3 Players, Player 1's turn, Deck Count: 222, Hand Count: 381, Discard Count: 103
Errors: 0

Test #272: 4 Players, Player 0's turn, Deck Count: 186, Hand Count: 172, Discard Count: 447
Errors: 0

Test #273: 2 Players, Player 0's turn, Deck Count: 463, Hand Count: 32, Discard Count: 244
Errors: 0

Test #274: 3 Players, Player 2's turn, Deck Count: 325, Hand Count: 416, Discard Count: 109
Errors: 0

Test #275: 3 Players, Player 1's turn, Deck Count: 392, Hand Count: 447, Discard Count: 263
Errors: 0

Test #276: 2 Players, Player 1's turn, Deck Count: 443, Hand Count: 102, Discard Count: 256
Errors: 0

Test #277: 2 Players, Player 1's turn, Deck Count: 23, Hand Count: 385, Discard Count: 410
Errors: 0

Test #278: 2 Players, Player 1's turn, Deck Count: 354, Hand Count: 167, Discard Count: 180
Errors: 0

Test #279: 3 Players, Player 0's turn, Deck Count: 217, Hand Count: 311, Discard Count: 234
Errors: 0

Test #280: 4 Players, Player 1's turn, Deck Count: 40, Hand Count: 8, Discard Count: 251
Errors: 0

Test #281: 4 Players, Player 2's turn, Deck Count: 213, Hand Count: 139, Discard Count: 486
Errors: 0

Test #282: 2 Players, Player 1's turn, Deck Count: 303, Hand Count: 241, Discard Count: 457
Errors: 0

Test #283: 4 Players, Player 0's turn, Deck Count: 343, Hand Count: 298, Discard Count: 340
Errors: 0

Test #284: 3 Players, Player 1's turn, Deck Count: 438, Hand Count: 193, Discard Count: 114
Errors: 0

Test #285: 3 Players, Player 0's turn, Deck Count: 15, Hand Count: 238, Discard Count: 49
Errors: 0

Test #286: 4 Players, Player 2's turn, Deck Count: 460, Hand Count: 219, Discard Count: 34
Errors: 0

Test #287: 3 Players, Player 0's turn, Deck Count: 271, Hand Count: 371, Discard Count: 205
Errors: 0

Test #288: 2 Players, Player 0's turn, Deck Count: 460, Hand Count: 137, Discard Count: 460
Errors: 0

Test #289: 2 Players, Player 1's turn, Deck Count: 54, Hand Count: 69, Discard Count: 351
Errors: 0

Test #290: 3 Players, Player 2's turn, Deck Count: 217, Hand Count: 90, Discard Count: 174
Errors: 0

Test #291: 4 Players, Player 2's turn, Deck Count: 110, Hand Count: 50, Discard Count: 396
Errors: 0

Test #292: 4 Players, Player 3's turn, Deck Count: 399, Hand Count: 15, Discard Count: 180
Errors: 0

Test #293: 3 Players, Player 0's turn, Deck Count: 74, Hand Count: 443, Discard Count: 90
Errors: 0

Test #294: 4 Players, Player 2's turn, Deck Count: 176, Hand Count: 227, Discard Count: 377
Errors: 0

Test #295: 2 Players, Player 1's turn, Deck Count: 440, Hand Count: 145, Discard Count: 20
Errors: 0

Test #296: 3 Players, Player 0's turn, Deck Count: 41, Hand Count: 87, Discard Count: 173
Errors: 0

Test #297: 2 Players, Player 0's turn, Deck Count: 113, Hand Count: 31, Discard Count: 105
Errors: 0

Test #298: 4 Players, Player 3's turn, Deck Count: 126, Hand Count: 8, Discard Count: 70
Errors: 0

Test #299: 4 Players, Player 3's turn, Deck Count: 338, Hand Count: 396, Discard Count: 372
Errors: 0

Test #300: 2 Players, Player 1's turn, Deck Count: 163, Hand Count: 244, Discard Count: 343
Errors: 0

Test #301: 2 Players, Player 1's turn, Deck Count: 418, Hand Count: 441, Discard Count: 63
Errors: 0

Test #302: 4 Players, Player 0's turn, Deck Count: 36, Hand Count: 270, Discard Count: 35
Errors: 0

Total run time for village random testing: 0.010000 seconds

Function 'updateCoins'
Lines executed:100.00% of 11
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'cardEffect'
Lines executed:8.10% of 210
Branches executed:13.14% of 175
Taken at least once:3.43% of 175
Calls executed:8.33% of 60

Function 'sea_hagEffect'
Lines executed:0.00% of 9
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
Calls executed:0.00% of 1

Function 'villageEffect'
Lines executed:100.00% of 6
No branches
Calls executed:100.00% of 3

Function 'council_roomEffect'
Lines executed:100.00% of 9
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
Calls executed:100.00% of 4

Function 'smithyEffect'
Lines executed:100.00% of 6
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 3

Function 'adventurerEffect'
Lines executed:100.00% of 18
Branches executed:100.00% of 12
Taken at least once:100.00% of 12
Calls executed:100.00% of 3

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:100.00% of 24
Branches executed:100.00% of 42
Taken at least once:100.00% of 42
Calls executed:100.00% of 3

Function 'isGameOver'
Lines executed:100.00% of 10
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:100.00% of 9
Branches executed:100.00% of 12
Taken at least once:100.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:95.16% of 62
Branches executed:100.00% of 46
Taken at least once:91.30% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

File 'dominion.c'
Lines executed:39.65% of 570
Branches executed:43.61% of 415
Taken at least once:37.83% of 415
Calls executed:29.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:11
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 64110 returned 100% blocks executed 100%
    64110:    8:int compare(const void* a, const void* b) {
    64110:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
     8674:   10:    return 1;
    55436:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
    16336:   12:    return -1;
    39100:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1056 returned 100% blocks executed 95%
     1056:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     1056:   44:  SelectStream(1);
call    0 returned 100%
     1056:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     1056:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     1056:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    11616:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   116160:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   105600:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     1056:   73:  if (numPlayers == 2)
branch  0 taken 38% (fallthrough)
branch  1 taken 62%
        -:   74:    {
      402:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      654:   77:  else if (numPlayers == 3)
branch  0 taken 47% (fallthrough)
branch  1 taken 53%
        -:   78:    {
      307:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      347:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     1056:   87:  if (numPlayers == 2)
branch  0 taken 38% (fallthrough)
branch  1 taken 62%
        -:   88:    {
      402:   89:      state->supplyCount[estate] = 8;
      402:   90:      state->supplyCount[duchy] = 8;
      402:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      654:   95:      state->supplyCount[estate] = 12;
      654:   96:      state->supplyCount[duchy] = 12;
      654:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     1056:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1056:  102:  state->supplyCount[silver] = 40;
     1056:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    22176:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   174240:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   163680:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    10560:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
        -:  114:		{
     2216:  115:		  if (numPlayers == 2){ 
branch  0 taken 41% (fallthrough)
branch  1 taken 59%
      449:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      659:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     9452:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    10560:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   153120:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     4169:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  139:    {
     3113:  140:      state->deckCount[i] = 0;
    12452:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
     9339:  143:	  state->deck[i][j] = estate;
     9339:  144:	  state->deckCount[i]++;
        -:  145:	}
    24904:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    21791:  148:	  state->deck[i][j] = copper;
    21791:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     4169:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  155:    {
     3113:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     4169:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     3113:  166:      state->handCount[i] = 0;
     3113:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    29568:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
    28512:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     1056:  182:  state->outpostPlayed = 0;
     1056:  183:  state->phase = 0;
     1056:  184:  state->numActions = 1;
     1056:  185:  state->numBuys = 1;
     1056:  186:  state->playedCardCount = 0;
     1056:  187:  state->whoseTurn = 0;
     1056:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     6336:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     5280:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
     1056:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
     1056:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 3326 returned 100% blocks executed 100%
     3326:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     3326:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     3326:  209:  if (state->deckCount[player] < 1)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
      171:  210:    return -1;
     3155:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    39930:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    33620:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    33620:  216:    newDeck[newDeckPos] = state->deck[player][card];
    33620:  217:    newDeckPos++;
   334925:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
   301305:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    33620:  221:    state->deckCount[player]--;
        -:  222:  }
    36775:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    33620:  224:    state->deck[player][i] = newDeck[i];
    33620:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     3155:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 42 returned 100% blocks executed 100%
       42:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
       42:  326:  int count = 0;
        -:  327:
      387:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
        -:  329:    {
      345:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  331:    }
        -:  332:
      387:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
        -:  334:    {
      345:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  336:    }
        -:  337:
      387:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
        -:  339:    {
      345:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  341:    }
        -:  342:
       42:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 1828 returned 100% blocks executed 100%
     1828:  346:int whoseTurn(struct gameState *state) {
     1828:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 11 returned 100% blocks executed 100%
       11:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       11:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
        -:  396:    {
        3:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        8:  401:  j = 0;
      208:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      200:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 20% (fallthrough)
branch  1 taken 81%
        -:  405:	{
       39:  406:	  j++;
        -:  407:	}
        -:  408:    }
        8:  409:  if ( j >= 3)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  410:    {
        4:  411:      return 1;
        -:  412:    }
        -:  413:
        4:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 53 returned 100% blocks executed 100%
       53:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
       53:  420:  int score = 0;
        -:  421:  //score from hand
      195:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
        -:  423:    {
      142:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
      142:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
      142:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
      142:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
      142:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
      142:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
call    2 returned 100%
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
      196:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
        -:  434:    {
      143:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
      143:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
      143:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
      143:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
      143:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
      143:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
call    2 returned 100%
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
      196:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
        -:  445:    {
      143:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
      143:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
      143:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
      143:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
      143:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
      143:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
call    2 returned 100%
        -:  452:    }
        -:  453:
       53:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 12035 returned 100% blocks executed 100%
    12035:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    12035:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     2642:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 97%
branch  1 taken 3% (fallthrough)
     2550:  534:      state->deck[player][i] = state->discard[player][i];
     2550:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       92:  538:    state->deckCount[player] = state->discardCount[player];
       92:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       92:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       92:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       92:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       92:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       92:  559:    if (deckCounter == 0)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       62:  560:      return -1;
        -:  561:
       30:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       30:  563:    state->deckCount[player]--;
       30:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    11943:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    11943:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    11943:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    11943:  576:    state->deckCount[player]--;
    11943:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    11973:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function adventurerEffect called 307 returned 100% blocks executed 100%
      307:  646:void adventurerEffect(struct gameState *state) {
      307:  647:	int drawntreasure = 0;
      307:  648:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  649:	int temphand[MAX_HAND];
      307:  650:	int z = 0;
        -:  651:	int cardDrawn;
        -:  652:	
     5851:  653:	while(drawntreasure<2) {
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  654:		// before bug:
        -:  655:		// if (state->deckCount[currentPlayer] <1) {
     5237:  656:		if (state->deckCount[currentPlayer] <= 1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
      121:  657:			shuffle(currentPlayer, state);
call    0 returned 100%
        -:  658:		}
        -:  659:		
     5237:  660:		drawCard(currentPlayer, state);
call    0 returned 100%
     5237:  661:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
     5237:  662:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 95% (fallthrough)
branch  3 taken 5%
branch  4 taken 4% (fallthrough)
branch  5 taken 96%
      614:  663:			drawntreasure++;
        -:  664:		else {
     4623:  665:			temphand[z]=cardDrawn;
     4623:  666:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     4623:  667:			z++;
        -:  668:		}
        -:  669:	}
     5237:  670:    while(z-1>=0) {
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
     4623:  671:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     4623:  672:		z=z-1;
        -:  673:    }
      307:  674:}
        -:  675:
function smithyEffect called 302 returned 100% blocks executed 100%
      302:  676:void smithyEffect(struct gameState *state, int handPos) {
      302:  677:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  678:	
        -:  679:	// before bug:
        -:  680:	// for (int i = 0; i < 3; i++) {
     1510:  681:	for (int i = 0; i <= 3; i++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
     1208:  682:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:  683:	}
        -:  684:		
        -:  685:    //discard card from hand
      302:  686:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
      302:  687:}
        -:  688:
function council_roomEffect called 1 returned 100% blocks executed 100%
        1:  689:void council_roomEffect(struct gameState *state, int handPos) {
        -:  690:	//+4 Cards
        1:  691:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        5:  692:	for (int i = 0; i < 4; i++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        4:  693:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:  694:	}
        -:  695:	
        -:  696:	//+1 Buy
        1:  697:	state->numBuys++;
        -:  698:	
        -:  699:	//Each other player draws a card
        4:  700:	for (int i = 0; i < state->numPlayers; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  701:		// Bug: the if shouldn't be commented out
        -:  702:		// if ( i != currentPlayer ) {
        3:  703:			drawCard(i, state);
call    0 returned 100%
        -:  704:		// }
        -:  705:	}
        -:  706:	
        -:  707:	//put played card in played card pile
        1:  708:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  709:}
        -:  710:
function villageEffect called 303 returned 100% blocks executed 100%
      303:  711:void villageEffect(struct gameState *state, int handPos) {
      303:  712:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  713:	//+1 Card
      303:  714:	drawCard(currentPlayer, state);
call    0 returned 100%
        -:  715:	
        -:  716:	//+2 Actions
      303:  717:	state->numActions = state->numActions + 2;
        -:  718:	
        -:  719:	//discard played card from hand
      303:  720:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
      303:  721:}
        -:  722:
function sea_hagEffect called 0 returned 0% blocks executed 0%
    #####:  723:void sea_hagEffect(struct gameState* state) {
    #####:  724:	int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  725:	for (int i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  726:		if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  727:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####:  728:			state->deckCount[i]--;
    #####:  729:			state->discardCount[i]++;
        -:  730:			// Bug: should be = instead of ==
    #####:  731:			state->deck[i][state->deckCount[i]--] == curse;//Top card now a curse
        -:  732:		}
        -:  733:	}
    #####:  734:}
        -:  735:
function cardEffect called 913 returned 100% blocks executed 6%
      913:  736:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  737:{
        -:  738:  int i;
        -:  739:  int j;
        -:  740:  int k;
        -:  741:  int x;
        -:  742:  int index;
      913:  743:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
      913:  744:  int nextPlayer = currentPlayer + 1;
        -:  745:
      913:  746:  int tributeRevealedCards[2] = {-1, -1};
        -:  747:  int temphand[MAX_HAND];// moved above the if statement
      913:  748:  int drawntreasure=0;
        -:  749:  int cardDrawn;
      913:  750:  int z = 0;// this is the counter for the temp hand
      913:  751:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
      366:  752:    nextPlayer = 0;
        -:  753:  }
        -:  754:  
        -:  755:	
        -:  756:  //uses switch to select card and perform actions
      913:  757:  switch(card) {
branch  0 taken 34%
branch  1 taken 33%
branch  2 taken 1%
branch  3 taken 33%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  758:    case adventurer:
      307:  759:		adventurerEffect(state);
call    0 returned 100%
      307:  760:		return 0;
        -:  761:		
        -:  762:	case smithy:
      302:  763:		smithyEffect(state, handPos);
call    0 returned 100%
      302:  764:		return 0;
        -:  765:			
        -:  766:    case council_room:
        1:  767:		council_roomEffect(state, handPos);
call    0 returned 100%
        1:  768:		return 0;
        -:  769:		
        -:  770:	case village:
      303:  771:		villageEffect(state, handPos);
call    0 returned 100%
      303:  772:		return 0;
        -:  773:		
        -:  774:	case sea_hag:
    #####:  775:		sea_hagEffect(state);
call    0 never executed
    #####:  776:		return 0;
        -:  777:			
        -:  778:    case feast:
        -:  779:      //gain card with cost up to 5
        -:  780:      //Backup hand
    #####:  781:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  782:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  783:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  784:      }
        -:  785:      //Backup hand
        -:  786:
        -:  787:      //Update Coins for Buy
    #####:  788:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  789:      x = 1;//Condition to loop on
    #####:  790:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  791:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  792:	  if (DEBUG)
        -:  793:	    printf("None of that card left, sorry!\n");
        -:  794:
        -:  795:	  if (DEBUG){
        -:  796:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  797:	  }
        -:  798:	}
    #####:  799:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  800:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  801:
        -:  802:	  if (DEBUG){
        -:  803:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  804:	  }
        -:  805:	}
        -:  806:	else{
        -:  807:
        -:  808:	  if (DEBUG){
        -:  809:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  810:	  }
        -:  811:
    #####:  812:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  813:	  x = 0;//No more buying cards
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:	  }
        -:  818:
        -:  819:	}
        -:  820:      }     
        -:  821:
        -:  822:      //Reset Hand
    #####:  823:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  824:	state->hand[currentPlayer][i] = temphand[i];
    #####:  825:	temphand[i] = -1;
        -:  826:      }
        -:  827:      //Reset Hand
        -:  828:      			
    #####:  829:      return 0;
        -:  830:			
        -:  831:    case gardens:
    #####:  832:      return -1;
        -:  833:			
        -:  834:    case mine:
    #####:  835:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  836:
    #####:  837:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  838:	{
    #####:  839:	  return -1;
        -:  840:	}
        -:  841:		
    #####:  842:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  843:	{
    #####:  844:	  return -1;
        -:  845:	}
        -:  846:
    #####:  847:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  848:	{
    #####:  849:	  return -1;
        -:  850:	}
        -:  851:
    #####:  852:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  853:
        -:  854:      //discard card from hand
    #####:  855:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  856:
        -:  857:      //discard trashed card
    #####:  858:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  859:	{
    #####:  860:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  861:	    {
    #####:  862:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  863:	      break;
        -:  864:	    }
        -:  865:	}
        -:  866:			
    #####:  867:      return 0;
        -:  868:			
        -:  869:    case remodel:
    #####:  870:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  871:
    #####:  872:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  873:	{
    #####:  874:	  return -1;
        -:  875:	}
        -:  876:
    #####:  877:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  878:
        -:  879:      //discard card from hand
    #####:  880:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  881:
        -:  882:      //discard trashed card
    #####:  883:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  884:	{
    #####:  885:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  886:	    {
    #####:  887:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  888:	      break;
        -:  889:	    }
        -:  890:	}
        -:  891:
        -:  892:
    #####:  893:      return 0;
        -:  894:		
        -:  895:    case baron:
    #####:  896:      state->numBuys++;//Increase buys by 1!
    #####:  897:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  898:	int p = 0;//Iterator for hand!
    #####:  899:	int card_not_discarded = 1;//Flag for discard set!
    #####:  900:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  901:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  902:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  903:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  904:	    state->discardCount[currentPlayer]++;
    #####:  905:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  906:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  907:	    }
    #####:  908:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  909:	    state->handCount[currentPlayer]--;
    #####:  910:	    card_not_discarded = 0;//Exit the loop
        -:  911:	  }
    #####:  912:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  913:	    if(DEBUG) {
        -:  914:	      printf("No estate cards in your hand, invalid choice\n");
        -:  915:	      printf("Must gain an estate if there are any\n");
        -:  916:	    }
    #####:  917:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  918:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  919:	      state->supplyCount[estate]--;//Decrement estates
    #####:  920:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  921:		isGameOver(state);
call    0 never executed
        -:  922:	      }
        -:  923:	    }
    #####:  924:	    card_not_discarded = 0;//Exit the loop
        -:  925:	  }
        -:  926:			    
        -:  927:	  else{
    #####:  928:	    p++;//Next card
        -:  929:	  }
        -:  930:	}
        -:  931:      }
        -:  932:			    
        -:  933:      else{
    #####:  934:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  935:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  936:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  937:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  938:	    isGameOver(state);
call    0 never executed
        -:  939:	  }
        -:  940:	}
        -:  941:      }
        -:  942:	    
        -:  943:      
    #####:  944:      return 0;
        -:  945:		
        -:  946:    case great_hall:
        -:  947:      //+1 Card
    #####:  948:      drawCard(currentPlayer, state);
call    0 never executed
        -:  949:			
        -:  950:      //+1 Actions
    #####:  951:      state->numActions++;
        -:  952:			
        -:  953:      //discard card from hand
    #####:  954:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  955:      return 0;
        -:  956:		
        -:  957:    case minion:
        -:  958:      //+1 action
    #####:  959:      state->numActions++;
        -:  960:			
        -:  961:      //discard card from hand
    #####:  962:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  963:			
    #####:  964:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  965:	{
    #####:  966:	  state->coins = state->coins + 2;
        -:  967:	}
        -:  968:			
    #####:  969:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  970:	{
        -:  971:	  //discard hand
    #####:  972:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  973:	    {
    #####:  974:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  975:	    }
        -:  976:				
        -:  977:	  //draw 4
    #####:  978:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  979:	    {
    #####:  980:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  981:	    }
        -:  982:				
        -:  983:	  //other players discard hand and redraw if hand size > 4
    #####:  984:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  985:	    {
    #####:  986:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  987:		{
    #####:  988:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  989:		    {
        -:  990:		      //discard hand
    #####:  991:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  992:			{
    #####:  993:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  994:			}
        -:  995:							
        -:  996:		      //draw 4
    #####:  997:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  998:			{
    #####:  999:			  drawCard(i, state);
call    0 never executed
        -: 1000:			}
        -: 1001:		    }
        -: 1002:		}
        -: 1003:	    }
        -: 1004:				
        -: 1005:	}
    #####: 1006:      return 0;
        -: 1007:		
        -: 1008:    case steward:
    #####: 1009:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1010:	{
        -: 1011:	  //+2 cards
    #####: 1012:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1013:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1014:	}
    #####: 1015:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1016:	{
        -: 1017:	  //+2 coins
    #####: 1018:	  state->coins = state->coins + 2;
        -: 1019:	}
        -: 1020:      else
        -: 1021:	{
        -: 1022:	  //trash 2 cards in hand
    #####: 1023:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1024:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1025:	}
        -: 1026:			
        -: 1027:      //discard card from hand
    #####: 1028:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1029:      return 0;
        -: 1030:		
        -: 1031:    case tribute:
    #####: 1032:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1033:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1034:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1035:	  state->deckCount[nextPlayer]--;
        -: 1036:	}
    #####: 1037:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1038:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1039:	  state->discardCount[nextPlayer]--;
        -: 1040:	}
        -: 1041:	else{
        -: 1042:	  //No Card to Reveal
        -: 1043:	  if (DEBUG){
        -: 1044:	    printf("No cards to reveal\n");
        -: 1045:	  }
        -: 1046:	}
        -: 1047:      }
        -: 1048:	    
        -: 1049:      else{
    #####: 1050:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1051:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1052:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1053:	    state->deckCount[nextPlayer]++;
    #####: 1054:	    state->discard[nextPlayer][i] = -1;
    #####: 1055:	    state->discardCount[nextPlayer]--;
        -: 1056:	  }
        -: 1057:			    
    #####: 1058:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1059:	} 
    #####: 1060:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1061:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1062:	state->deckCount[nextPlayer]--;
    #####: 1063:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1064:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1065:	state->deckCount[nextPlayer]--;
        -: 1066:      }    
        -: 1067:		       
    #####: 1068:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1069:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1070:	state->playedCardCount++;
    #####: 1071:	tributeRevealedCards[1] = -1;
        -: 1072:      }
        -: 1073:
    #####: 1074:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1075:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1076:	  state->coins += 2;
        -: 1077:	}
        -: 1078:		    
    #####: 1079:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1080:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1081:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1082:	}
        -: 1083:	else{//Action Card
    #####: 1084:	  state->numActions = state->numActions + 2;
        -: 1085:	}
        -: 1086:      }
        -: 1087:	    
    #####: 1088:      return 0;
        -: 1089:		
        -: 1090:    case ambassador:
    #####: 1091:      j = 0;		//used to check if player has enough cards to discard
        -: 1092:
    #####: 1093:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1094:	{
    #####: 1095:	  return -1;				
        -: 1096:	}
        -: 1097:
    #####: 1098:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1099:	{
    #####: 1100:	  return -1;
        -: 1101:	}
        -: 1102:
    #####: 1103:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1104:	{
    #####: 1105:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1106:	    {
    #####: 1107:	      j++;
        -: 1108:	    }
        -: 1109:	}
    #####: 1110:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1111:	{
    #####: 1112:	  return -1;				
        -: 1113:	}
        -: 1114:
        -: 1115:      if (DEBUG) 
        -: 1116:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1117:
        -: 1118:      //increase supply count for choosen card by amount being discarded
    #####: 1119:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1120:			
        -: 1121:      //each other player gains a copy of revealed card
    #####: 1122:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1123:	{
    #####: 1124:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1125:	    {
    #####: 1126:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1127:	    }
        -: 1128:	}
        -: 1129:
        -: 1130:      //discard played card from hand
    #####: 1131:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1132:
        -: 1133:      //trash copies of cards returned to supply
    #####: 1134:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1135:	{
    #####: 1136:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1137:	    {
    #####: 1138:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1139:		{
    #####: 1140:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1141:		  break;
        -: 1142:		}
        -: 1143:	    }
        -: 1144:	}			
        -: 1145:
    #####: 1146:      return 0;
        -: 1147:		
        -: 1148:	  case cutpurse:
        -: 1149:
    #####: 1150:	        updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1151:	        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1152:	  	{
    #####: 1153:	  	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1154:	  	    {
    #####: 1155:	  	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1156:	  		{
    #####: 1157:	  		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1158:	  		    {
    #####: 1159:	  		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1160:	  		      break;
        -: 1161:	  		    }
    #####: 1162:	  		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1163:	  		    {
    #####: 1164:	  		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1165:	  			{
        -: 1166:	  			  if (DEBUG)
        -: 1167:	  			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1168:	  			}	
    #####: 1169:	  		      break;
        -: 1170:	  		    }		
        -: 1171:	  		}
        -: 1172:					
        -: 1173:	  	    }
        -: 1174:				
        -: 1175:	  	}				
        -: 1176:
        -: 1177:	        //discard played card from hand
    #####: 1178:	        discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1179:
    #####: 1180:	        return 0;
        -: 1181:
        -: 1182:		
        -: 1183:    case embargo: 
        -: 1184:      //+2 Coins
    #####: 1185:      state->coins = state->coins + 2;
        -: 1186:			
        -: 1187:      //see if selected pile is in play
    #####: 1188:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1189:	{
    #####: 1190:	  return -1;
        -: 1191:	}
        -: 1192:			
        -: 1193:      //add embargo token to selected supply pile
    #####: 1194:      state->embargoTokens[choice1]++;
        -: 1195:			
        -: 1196:      //trash card
    #####: 1197:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1198:      return 0;
        -: 1199:		
        -: 1200:	  case outpost:
        -: 1201:	        //set outpost flag
    #####: 1202:	        state->outpostPlayed++;
        -: 1203:			
        -: 1204:	        //discard card
    #####: 1205:	        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1206:	        return 0;
        -: 1207:		
        -: 1208:    case salvager:
        -: 1209:      //+1 buy
    #####: 1210:      state->numBuys++;
        -: 1211:			
    #####: 1212:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1213:	{
        -: 1214:	  //gain coins equal to trashed card
    #####: 1215:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1216:	  //trash card
    #####: 1217:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1218:	}
        -: 1219:			
        -: 1220:      //discard card
    #####: 1221:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1222:      return 0;
        -: 1223:		
        -: 1224:    case treasure_map:
        -: 1225:      //search hand for another treasure_map
    #####: 1226:      index = -1;
    #####: 1227:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1228:	{
    #####: 1229:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1230:	    {
    #####: 1231:	      index = i;
    #####: 1232:	      break;
        -: 1233:	    }
        -: 1234:	}
    #####: 1235:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1236:	{
        -: 1237:	  //trash both treasure cards
    #####: 1238:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1239:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1240:
        -: 1241:	  //gain 4 Gold cards
    #####: 1242:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1243:	    {
    #####: 1244:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1245:	    }
        -: 1246:				
        -: 1247:	  //return success
    #####: 1248:	  return 1;
        -: 1249:	}
        -: 1250:			
        -: 1251:      //no second treasure_map found in hand
    #####: 1252:      return -1;
        -: 1253:    }
        -: 1254:	
    #####: 1255:  return -1;
        -: 1256:}
        -: 1257:
function discardCard called 606 returned 100% blocks executed 78%
      606: 1258:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1259:{
        -: 1260:	
        -: 1261:  //if card is not trashed, added to Played pile 
      606: 1262:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1263:    {
        -: 1264:      //add card to played pile
      606: 1265:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      606: 1266:      state->playedCardCount++;
        -: 1267:    }
        -: 1268:	
        -: 1269:  //set played card to -1
      606: 1270:  state->hand[currentPlayer][handPos] = -1;
        -: 1271:	
        -: 1272:  //remove card from player's hand
      606: 1273:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1274:    {
        -: 1275:      //reduce number of cards in hand
    #####: 1276:      state->handCount[currentPlayer]--;
        -: 1277:    }
      606: 1278:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1279:    {
        -: 1280:      //reduce number of cards in hand
    #####: 1281:      state->handCount[currentPlayer]--;
        -: 1282:    }
        -: 1283:  else 	
        -: 1284:    {
        -: 1285:      //replace discarded card with last card in hand
      606: 1286:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1287:      //set last card to -1
      606: 1288:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1289:      //reduce number of cards in hand
      606: 1290:      state->handCount[currentPlayer]--;
        -: 1291:    }
        -: 1292:	
      606: 1293:  return 0;
        -: 1294:}
        -: 1295:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1296:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1297:{
        -: 1298:  //Note: supplyPos is enum of choosen card
        -: 1299:	
        -: 1300:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1301:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1302:    {
    #####: 1303:      return -1;
        -: 1304:    }
        -: 1305:	
        -: 1306:  //added card for [whoseTurn] current player:
        -: 1307:  // toFlag = 0 : add to discard
        -: 1308:  // toFlag = 1 : add to deck
        -: 1309:  // toFlag = 2 : add to hand
        -: 1310:
    #####: 1311:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1312:    {
    #####: 1313:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1314:      state->deckCount[player]++;
        -: 1315:    }
    #####: 1316:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1317:    {
    #####: 1318:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1319:      state->handCount[player]++;
        -: 1320:    }
        -: 1321:  else
        -: 1322:    {
    #####: 1323:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1324:      state->discardCount[player]++;
        -: 1325:    }
        -: 1326:	
        -: 1327:  //decrease number in supply pile
    #####: 1328:  state->supplyCount[supplyPos]--;
        -: 1329:	 
    #####: 1330:  return 0;
        -: 1331:}
        -: 1332:
function updateCoins called 1304 returned 100% blocks executed 100%
     1304: 1333:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1334:{
        -: 1335:  int i;
        -: 1336:	
        -: 1337:  //reset coin count
     1304: 1338:  state->coins = 0;
        -: 1339:
        -: 1340:  //add coins for each Treasure card in player's hand
     7314: 1341:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 82%
branch  1 taken 18% (fallthrough)
        -: 1342:    {
     6010: 1343:      if (state->hand[player][i] == copper)
branch  0 taken 73% (fallthrough)
branch  1 taken 27%
        -: 1344:	{
     4406: 1345:	  state->coins += 1;
        -: 1346:	}
     1604: 1347:      else if (state->hand[player][i] == silver)
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -: 1348:	{
      184: 1349:	  state->coins += 2;
        -: 1350:	}
     1420: 1351:      else if (state->hand[player][i] == gold)
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
        -: 1352:	{
      182: 1353:	  state->coins += 3;
        -: 1354:	}	
        -: 1355:    }	
        -: 1356:
        -: 1357:  //add bonus
     1304: 1358:  state->coins += bonus;
        -: 1359:
     1304: 1360:  return 0;
        -: 1361:}
        -: 1362:
        -: 1363:
        -: 1364://end of dominion.c
        -: 1365:
